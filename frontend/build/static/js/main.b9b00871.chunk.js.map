{"version":3,"sources":["components/Provider/apollo.client.ts","components/Provider/Provider.tsx","components/LoginForm/LoginForm.styles.ts","components/LoginForm/LoginForm.tsx","pages/Login.tsx","components/TasksList/CategoryBadge.tsx","components/TasksList/TaskFilters/TaskFilters.styles.ts","components/TasksList/TaskFilters/TaskFilters.tsx","components/TasksList/StatusBadge.tsx","components/TasksList/TasksList.styles.ts","components/TasksList/TasksList.tsx","pages/Index.tsx","components/Task/Task.tsx","pages/Task.tsx","components/TaskForm/TaskForm.styles.ts","components/TaskForm/TaskForm.tsx","pages/NewTask.tsx","pages/EditTask.tsx","App.tsx","index.tsx"],"names":["httpLink","createHttpLink","uri","authLink","setContext","_","headers","token","localStorage","getItem","authorization","apolloClient","ApolloClient","link","concat","cache","InMemoryCache","Provider","children","ApolloProvider","client","createUseStyles","theme","wrapper","height","display","alignItems","justifyContent","backgroundColor","colors","gray","title","marginBottom","spacing","xl","field","md","inner","width","controls","marginTop","lg","theming","LoginForm","onSubmit","loading","error","classes","useStyles","form","useForm","initialValues","email","password","validationRules","val","includes","trim","length","className","shadow","padding","visible","align","_values","label","placeholder","value","values","onChange","event","setFieldValue","currentTarget","errors","color","size","position","variant","onClick","setValues","type","mutation","gql","Login","history","useHistory","useState","setLoading","setError","useMutation","mutate","variables","then","response","data","login","window","setItem","push","CONSULTING","name","DIAGNOSIS","REPAIR","OTHER","CategoryBadge","category","margin","flex","categories","Object","keys","CATEGORY_DATA","map","key","TaskFilters","onFilterChange","customerPhone","clearable","locale","createdAt","inputFormat","range","ACCEPTED","IN_PROGRESS","READY","CLOSED","StatusBadge","status","minHeight","paddingTop","paddingBottom","header","TasksList","rows","item","id","description","customer","phone","dayjs","format","component","Link","to","tasksQuery","Index","filters","setFilters","useQuery","undefined","dateStart","dateEnd","allTasks","current","deleteMutation","Task","style","refetchQueries","query","replace","employee","taskQuery","TaskPage","params","useParams","taskById","DEFAULT_VALUES","statuses","STATUS_DATA","nonEmpty","TaskForm","autosize","createNewTask","NewTask","useEffect","input","createTask","task","updateTask","EditTask","App","path","exact","render","document","getElementById"],"mappings":"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","file":"static/js/main.b9b00871.chunk.js","sourcesContent":["import { ApolloClient, createHttpLink, InMemoryCache } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nconst httpLink = createHttpLink({\n  uri: process.env.NODE_ENV === 'production' ? 'https://domclick.srezanova.me/graphql/' : 'http://localhost:8000/graphql/',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('auth');\n\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nexport const apolloClient = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n","import { MantineProvider, GlobalStyles, NormalizeCSS } from '@mantine/core';\nimport { ApolloProvider } from '@apollo/client';\nimport { apolloClient } from './apollo.client';\n\ninterface ProviderProps {\n  children: React.ReactNode;\n}\n\nexport function Provider({ children }: ProviderProps) {\n  return (\n    <ApolloProvider client={apolloClient}>\n      <MantineProvider>\n        <GlobalStyles />\n        <NormalizeCSS />\n        {children}\n      </MantineProvider>\n    </ApolloProvider>\n  );\n}\n","import { createUseStyles } from 'react-jss';\nimport { theming } from '@mantine/core';\n\nexport default createUseStyles((theme) => ({\n  wrapper: {\n    height: '100vh',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: theme.colors.gray[0],\n  },\n\n  title: {\n    marginBottom: theme.spacing.xl * 1.5,\n  },\n\n  field: {\n    marginBottom: theme.spacing.md,\n  },\n\n  inner: {\n    width: 400,\n  },\n\n  controls: {\n    marginTop: theme.spacing.lg,\n  },\n}), { theming });\n","import { TextInput, PasswordInput, Paper, Button, LoadingOverlay, Text, Title, Group } from '@mantine/core';\nimport { useForm } from '@mantine/hooks';\nimport useStyles from './LoginForm.styles';\n\nexport interface LoginValues {\n  email: string;\n  password: string;\n}\n\ninterface LoginFormProps {\n  onSubmit(values: LoginValues): void;\n  loading: boolean;\n  error: string | boolean;\n}\n\nexport function LoginForm({ onSubmit, loading, error }: LoginFormProps) {\n  const classes = useStyles();\n  const form = useForm({\n    initialValues: { email: '', password: '' },\n    validationRules: {\n      email: (val) => val.includes('@'),\n      password: (val) => val.trim().length > 0,\n    },\n  });\n\n  const onFill = () => {\n    form.setValues({ email: 'user1@email.com', password: 'testpassword' });\n  };\n\n  const handleSubmit = (_values: any) => {\n    onSubmit(_values);\n  };\n\n  return (\n    <div className={classes.wrapper}>\n      <Paper className={classes.inner} shadow=\"sm\" padding=\"xl\">\n        <LoadingOverlay visible={loading} />\n\n        <Title align=\"center\" className={classes.title}>Войти</Title>\n\n        <form onSubmit={form.onSubmit(handleSubmit)}>\n          <TextInput\n            className={classes.field}\n            label=\"Почта\"\n            placeholder=\"email@example.com\"\n            value={form.values.email}\n            onChange={(event) => form.setFieldValue('email', event.currentTarget.value)}\n            error={form.errors.email && 'Введите корректный email'}\n          />\n\n          <PasswordInput\n            className={classes.field}\n            label=\"Пароль\"\n            placeholder=\"Пароль\"\n            value={form.values.password}\n            onChange={(event) => form.setFieldValue('password', event.currentTarget.value)}\n            error={form.errors.password && 'Введите корректный пароль'}\n          />\n\n          {error && <Text color=\"red\" size=\"sm\">{error}</Text>}\n\n          <Group position=\"apart\" className={classes.controls}>\n            <Button color=\"gray\" variant=\"link\" onClick={onFill}>Демо пользователь (сотрудник)</Button>\n            <Button type=\"submit\">Войти</Button>\n          </Group>\n        </form>\n      </Paper>\n    </div>\n  );\n}\n","import { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useMutation, gql } from '@apollo/client';\nimport { LoginForm, LoginValues } from '../components/LoginForm/LoginForm';\n\nconst mutation = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      errors\n    }\n  }\n`;\n\nexport default function Login() {\n  const history = useHistory();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [mutate] = useMutation(mutation);\n\n  const handleSubmit = (values: LoginValues) => {\n    setLoading(true);\n    mutate({ variables: values }).then(response => {\n      const token = response.data.login.token as string;\n      if (!token) {\n        setError(true);\n      } else {\n        setError(false);\n        window.localStorage.setItem('auth', token);\n        history.push('/');\n      }\n\n      setLoading(false);\n    });\n  };\n\n  return (\n    <LoginForm onSubmit={handleSubmit} loading={loading} error={error && 'Неверная почта или пароль'} />\n  );\n}\n","import { Badge } from '@mantine/core';\nimport type { Category } from '../../types';\n\ninterface CategoryBadgeProps {\n  category: Category;\n}\n\nexport const data: Record<Category, { color: string; name: string }> = {\n  CONSULTING: {\n    name: 'Консультация',\n    color: 'grape',\n  },\n\n  DIAGNOSIS: {\n    name: 'Диагностика',\n    color: 'indigo',\n  },\n\n  REPAIR: {\n    name: 'Ремонт',\n    color: 'blue',\n  },\n\n  OTHER: {\n    name: 'Прочее',\n    color: 'gray',\n  },\n};\n\nexport function CategoryBadge({ category }: CategoryBadgeProps) {\n  const { name, color } = data[category];\n  return <Badge color={color} variant=\"light\">{name}</Badge>;\n}\n","import { createUseStyles } from 'react-jss';\nimport { theming } from '@mantine/core';\n\nexport default createUseStyles((theme) => ({\n  wrapper: {\n    display: 'flex',\n    margin: -5,\n    marginBottom: theme.spacing.xl,\n  },\n\n  field: {\n    flex: 1,\n    margin: 5,\n  },\n}), { theming });\n","import { Select, TextInput } from '@mantine/core';\nimport { DateRangePicker, DatePicker } from '@mantine/dates';\nimport { data as CATEGORY_DATA } from '../CategoryBadge';\nimport type { Category } from '../../../types';\nimport useStyles from './TaskFilters.styles';\n\nexport interface TaskFiltersProps {\n  values: {\n    customerPhone: string;\n    category: Category;\n    createdAt: Date;\n    range: [Date, Date];\n  };\n\n  onFilterChange(field: string, value: any): void;\n}\n\nconst categories = Object.keys(CATEGORY_DATA).map(key => ({\n  value: key,\n  label: CATEGORY_DATA[key].name,\n}));\n\nexport function TaskFilters({ values, onFilterChange }: TaskFiltersProps) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.wrapper}>\n      <TextInput\n        className={classes.field}\n        label=\"Телефон клиента\"\n        placeholder=\"Телефон клиента\"\n        value={values.customerPhone}\n        onChange={(event) => onFilterChange('customerPhone', event.currentTarget.value)}\n      />\n      <Select\n        className={classes.field}\n        data={categories}\n        label=\"Тип заявки\"\n        placeholder=\"Тип заявки\"\n        value={values.category}\n        onChange={(value) => onFilterChange('category', value)}\n        clearable\n      />\n      <DatePicker\n        className={classes.field}\n        locale=\"ru\"\n        label=\"Дата создания\"\n        placeholder=\"Дата создания\"\n        value={values.createdAt}\n        onChange={(value) => onFilterChange('createdAt', value)}\n      />\n      <DateRangePicker\n        className={classes.field}\n        locale=\"ru\"\n        inputFormat=\"DD MMMM\"\n        label=\"Интервал\"\n        placeholder=\"Интервал\"\n        value={values.range}\n        onChange={(value) => onFilterChange('range', value)}\n      />\n    </div>\n  );\n}\n","import { Badge } from '@mantine/core';\nimport type { Status } from '../../types';\n\ninterface StatusBadgeProps {\n  status: Status;\n}\n\nexport const data: Record<Status, { color: string; name: string }> = {\n  ACCEPTED: {\n    name: 'Принято',\n    color: 'teal',\n  },\n\n  IN_PROGRESS: {\n    name: 'В работе',\n    color: 'indigo',\n  },\n\n  READY: {\n    name: 'Готово',\n    color: 'red',\n  },\n\n  CLOSED: {\n    name: 'Закрыто',\n    color: 'gray',\n  },\n};\n\nexport function StatusBadge({ status }: StatusBadgeProps) {\n  const { name, color } = data[status];\n  return <Badge color={color} variant=\"outline\">{name}</Badge>;\n}\n","import { createUseStyles } from 'react-jss';\nimport { theming } from '@mantine/core';\n\nexport default createUseStyles((theme) => ({\n  wrapper: {\n    backgroundColor: theme.colors.gray[0],\n    minHeight: '100vh',\n    paddingTop: theme.spacing.xl * 2,\n    paddingBottom: theme.spacing.xl * 2,\n  },\n\n  header: {\n    marginBottom: theme.spacing.md,\n  },\n}), { theming });\n","import dayjs from 'dayjs';\nimport { Link } from 'react-router-dom';\nimport { Pencil2Icon } from '@modulz/radix-icons';\nimport { Paper, Table, Title, Container, Group, Button, ActionIcon, Text } from '@mantine/core';\nimport type { Task } from '../../types';\nimport { TaskFiltersProps, TaskFilters } from './TaskFilters/TaskFilters';\nimport { StatusBadge } from './StatusBadge';\nimport { CategoryBadge } from './CategoryBadge';\nimport useStyles from './TasksList.styles';\n\ninterface TasksListProps extends TaskFiltersProps {\n  data: Task[];\n}\n\nexport function TasksList({ data, values, onFilterChange }: TasksListProps) {\n  const classes = useStyles();\n\n  const rows = data.map(item => (\n    <tr key={item.id}>\n      <td>{item.id}</td>\n      <td><Text size=\"xs\">{item.description}</Text></td>\n      <td><Text size=\"xs\">{item.customer.phone}</Text></td>\n      <td>{dayjs(item.createdAt).locale('ru').format('DD MMMM YYYY')}</td>\n      <td><StatusBadge status={item.status} /></td>\n      <td><CategoryBadge category={item.category} /></td>\n      <td>\n        <ActionIcon component={Link} to={`/tasks/${item.id}/`} variant=\"outline\">\n          <Pencil2Icon />\n        </ActionIcon>\n      </td>\n    </tr>\n  ));\n\n  return (\n    <div className={classes.wrapper}>\n      <Container size=\"xl\">\n        <Group position=\"apart\" className={classes.header}>\n          <Title>Все заявки</Title>\n          <Button component={Link} to=\"/new-task/\">Создать заявку</Button>\n        </Group>\n\n        <TaskFilters values={values} onFilterChange={onFilterChange} />\n\n        <Paper shadow=\"sm\" padding=\"xl\">\n          <Table>\n            <thead>\n              <tr>\n                <th>Номер заявки</th>\n                <th>Описание</th>\n                <th>Клиент</th>\n                <th>Дата создания</th>\n                <th>Статус</th>\n                <th>Тип заявки</th>\n                <th />\n              </tr>\n            </thead>\n            <tbody>{rows}</tbody>\n          </Table>\n        </Paper>\n      </Container>\n    </div>\n  );\n}\n","import { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useQuery, gql } from '@apollo/client';\nimport dayjs from 'dayjs';\nimport { TasksList } from '../components/TasksList/TasksList';\nimport type { TaskFiltersProps } from '../components/TasksList/TaskFilters/TaskFilters';\n\nexport const tasksQuery = gql`\n  query tasks($customerPhone: String, $category: CategoryEnum, $createdAt: String, $dateStart: String, $dateEnd: String) {\n    allTasks(customerPhone: $customerPhone, category: $category, createdAt: $createdAt, dateStart: $dateStart, dateEnd: $dateEnd) {\n      id\n      createdAt\n      category\n      status\n      description\n      customer {\n        id\n        phone\n        name\n      }\n      employee {\n        id\n        email\n      }\n    }\n  }\n`;\n\nexport default function Index() {\n  const history = useHistory();\n  const [filters, setFilters] = useState<TaskFiltersProps['values']>({\n    customerPhone: '',\n    category: null,\n    createdAt: null,\n    range: [null, null],\n  });\n\n  const handleFilterChange = (field: string, value: any) => setFilters(current => ({\n    ...current,\n    [field]: value,\n  }));\n\n  const { data, loading, error } = useQuery(tasksQuery, {\n    variables: {\n      customerPhone: filters.customerPhone.trim().length > 0 ? filters.customerPhone : undefined,\n      category: filters.category || undefined,\n      createdAt: filters.createdAt ? dayjs(filters.createdAt).format('YYYY-MM-DD') : undefined,\n      dateStart: filters.range[0] ? dayjs(filters.range[0]).format('YYYY-MM-DD') : undefined,\n      dateEnd: filters.range[1] ? dayjs(filters.range[1]).format('YYYY-MM-DD') : undefined,\n    },\n  });\n\n  if (error) {\n    history.push('/login');\n    return null;\n  }\n\n  return (\n    <div>\n      <TasksList\n        data={loading ? [] : data.allTasks}\n        values={filters}\n        onFilterChange={handleFilterChange}\n      />\n    </div>\n  );\n}\n","import { useMutation, gql } from '@apollo/client';\nimport { Table, Text, Title, Container, Group, Button } from '@mantine/core';\nimport { Link, useHistory } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport type { Task as TaskType } from '../../types';\nimport { CategoryBadge } from '../TasksList/CategoryBadge';\nimport { StatusBadge } from '../TasksList/StatusBadge';\nimport { tasksQuery } from '../../pages/Index';\n\nconst deleteMutation = gql`\n  mutation deleteTaskMutation($id: ID!) {\n    deleteTask(id: $id) {\n      id\n    }\n  }\n`;\n\ninterface TaskProps {\n  data: TaskType;\n}\n\nexport function Task({ data }: TaskProps) {\n  const [mutate] = useMutation(deleteMutation);\n  const history = useHistory();\n\n  const handleDelete = () => {\n    mutate({ variables: { id: data.id }, refetchQueries: [{ query: tasksQuery }] }).then(() => history.replace('/'));\n  };\n\n  return (\n    <div style={{ marginTop: 100 }}>\n      <Container>\n        <div style={{ marginBottom: 30, display: 'flex', justifyContent: 'space-between' }}>\n          <Title>Заявка</Title>\n          <Group>\n            <Button color=\"red\" onClick={handleDelete}>Удалить заявку</Button>\n            <Button component={Link} to={`/tasks/${data.id}/edit`}>Редактировать</Button>\n          </Group>\n        </div>\n\n        <Table>\n          <tbody>\n            <tr>\n              <td>Номер заявки</td>\n              <td>{data.id}</td>\n            </tr>\n            <tr>\n              <td>Дата создания</td>\n              <td>{dayjs(data.createdAt).locale('ru').format('DD MMMM YYYY')}</td>\n            </tr>\n            <tr>\n              <td>Телефон клиента</td>\n              <td>{data.customer.phone}</td>\n            </tr>\n            <tr>\n              <td>Имя клиента</td>\n              <td>{data.customer.name}</td>\n            </tr>\n            <tr>\n              <td>Ответственный сотрудник</td>\n              <td>{data.employee.email}</td>\n            </tr>\n            <tr>\n              <td>Тип заявки</td>\n              <td><CategoryBadge category={data.category} /></td>\n            </tr>\n            <tr>\n              <td>Статус</td>\n              <td><StatusBadge status={data.status} /></td>\n            </tr>\n            <tr>\n              <td>Описание</td>\n              <td><Text size=\"sm\">{data.description}</Text></td>\n            </tr>\n          </tbody>\n        </Table>\n      </Container>\n    </div>\n  );\n}\n","import { useQuery, gql } from '@apollo/client';\nimport { LoadingOverlay } from '@mantine/core';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { Task } from '../components/Task/Task';\n\nexport const taskQuery = gql`\n  query taskQuery($id: ID!) {\n    taskById(id: $id) {\n      id\n      createdAt\n      employee {\n        id\n        email\n      }\n      category\n      status\n      description\n      customer {\n        id\n        name\n        phone\n      }\n    }\n  }\n`;\n\nexport default function TaskPage() {\n  const history = useHistory();\n  const params = useParams<{ id: string }>();\n  const { data, loading, error } = useQuery(taskQuery, { variables: { id: params.id } });\n\n  if (error) {\n    history.push('/login');\n    return null;\n  }\n\n  return (\n    <div>\n      {loading ? <LoadingOverlay visible /> : <Task data={data.taskById} />}\n    </div>\n  );\n}\n","import { createUseStyles } from 'react-jss';\nimport { theming } from '@mantine/core';\n\nexport default createUseStyles((theme) => ({\n  wrapper: {\n    minHeight: '100vh',\n    backgroundColor: theme.colors.gray[0],\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n\n  field: {\n    marginBottom: theme.spacing.md,\n  },\n\n  inner: {\n    width: 500,\n  },\n\n  title: {\n    marginBottom: theme.spacing.xl * 1.5,\n  },\n}), { theming });\n","import { Title, TextInput, Select, Textarea, Button, Paper, Group } from '@mantine/core';\nimport { useForm } from '@mantine/hooks';\nimport type { Status, Category } from '../../types';\nimport { data as STATUS_DATA } from '../TasksList/StatusBadge';\nimport { data as CATEGORY_DATA } from '../TasksList/CategoryBadge';\nimport useStyles from './TaskForm.styles';\n\nexport interface TaskFormValues {\n  category: Category;\n  status: Status;\n  description: string;\n  customerPhone: string;\n}\n\ninterface TaskFormProps {\n  title: string;\n  initialValues?: TaskFormValues;\n  onSubmit(values: TaskFormValues): void;\n}\n\nconst DEFAULT_VALUES: TaskFormValues = {\n  category: null,\n  status: 'ACCEPTED',\n  description: '',\n  customerPhone: '',\n};\n\nconst statuses = Object.keys(STATUS_DATA).map(key => ({\n  value: key,\n  label: STATUS_DATA[key].name,\n}));\n\nconst categories = Object.keys(CATEGORY_DATA).map(key => ({\n  value: key,\n  label: CATEGORY_DATA[key].name,\n}));\n\nconst nonEmpty = (val: string) => val && val.trim().length > 0;\n\nexport function TaskForm({ title, initialValues, onSubmit }: TaskFormProps) {\n  const classes = useStyles();\n  const form = useForm<TaskFormValues>({\n    initialValues: initialValues || DEFAULT_VALUES,\n    validationRules: {\n      category: nonEmpty,\n      status: nonEmpty,\n      description: nonEmpty,\n      customerPhone: nonEmpty,\n    },\n  });\n\n  return (\n    <div className={classes.wrapper}>\n      <Paper shadow=\"sm\" padding=\"xl\" className={classes.inner}>\n        <Title align=\"center\" className={classes.title}>{title}</Title>\n\n        <form onSubmit={form.onSubmit(onSubmit)}>\n          <TextInput\n            className={classes.field}\n            label=\"Телефон клиента\"\n            placeholder=\"Телефон клиента\"\n            value={form.values.customerPhone}\n            onChange={event => form.setFieldValue('customerPhone', event.currentTarget.value)}\n            error={form.errors.customerPhone && 'Введите значение'}\n          />\n\n          <Textarea\n            className={classes.field}\n            label=\"Описание\"\n            placeholder=\"Описание\"\n            autosize\n            value={form.values.description}\n            onChange={event => form.setFieldValue('description', event.currentTarget.value)}\n            error={form.errors.description && 'Введите значение'}\n          />\n\n          <Select\n            className={classes.field}\n            data={statuses}\n            label=\"Статус\"\n            placeholder=\"Статус\"\n            value={form.values.status as string}\n            onChange={value => form.setFieldValue('status', value as Status)}\n            error={form.errors.status && 'Введите значение'}\n          />\n\n          <Select\n            className={classes.field}\n            data={categories}\n            label=\"Тип заявки\"\n            placeholder=\"Тип заявки\"\n            value={form.values.category as string}\n            onChange={value => form.setFieldValue('category', value as Category)}\n            error={form.errors.category && 'Введите значение'}\n          />\n\n          <Group position=\"right\">\n            <Button type=\"submit\">{title}</Button>\n          </Group>\n        </form>\n      </Paper>\n    </div>\n  );\n}\n","import { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useMutation, gql } from '@apollo/client';\nimport { TaskForm, TaskFormValues } from '../components/TaskForm/TaskForm';\n\nconst createNewTask = gql`\n  mutation createNewTask($input: TaskInput!) {\n    createTask(taskData: $input) {\n      task {\n        id\n      }\n    }\n  }\n`;\n\nexport default function NewTask() {\n  const history = useHistory();\n  const [mutate] = useMutation(createNewTask);\n\n  useEffect(() => {\n    if (!localStorage.getItem('auth')) {\n      history.push('/login');\n    }\n  }, []);\n\n  const handleSubmit = (values: TaskFormValues) => {\n    mutate({ variables: { input: values } }).then(response => history.push(`/tasks/${response.data.createTask.task.id}`));\n  };\n\n  return <TaskForm title=\"Создать новую заявку\" onSubmit={handleSubmit} />;\n}\n","import { useHistory, useParams } from 'react-router-dom';\nimport { useMutation, useQuery, gql } from '@apollo/client';\nimport { LoadingOverlay } from '@mantine/core';\nimport { TaskForm, TaskFormValues } from '../components/TaskForm/TaskForm';\nimport { taskQuery } from './Task';\n\nconst updateTask = gql`\n  mutation updateTask($input: TaskInput!) {\n    updateTask(taskData: $input) {\n      task {\n        id\n      }\n    }\n  }\n`;\n\nexport default function EditTask() {\n  const params = useParams<{ id: string }>();\n  const history = useHistory();\n  const { data, loading, error } = useQuery(taskQuery, { variables: { id: params.id } });\n\n  const [mutate] = useMutation(updateTask);\n  const handleSubmit = (values: TaskFormValues) => {\n    const input = {\n      id: params.id,\n      description: values.description,\n      customerPhone: values.customerPhone,\n      category: values.category,\n      status: values.status,\n    };\n\n    mutate({ variables: { input }, refetchQueries: [{ query: taskQuery, variables: { id: params.id } }] }).then(response => history.push(`/tasks/${response.data.updateTask.task.id}`));\n  };\n\n  if (loading) {\n    return <LoadingOverlay visible />;\n  }\n\n  if (error) {\n    history.push('/login');\n    return null;\n  }\n\n  return <TaskForm title=\"Редактировать заявку\" onSubmit={handleSubmit} initialValues={{ ...data.taskById, customerPhone: data.taskById.customer.phone }} />;\n}\n","import { BrowserRouter, Route } from 'react-router-dom';\nimport { Provider } from './components/Provider/Provider';\nimport Login from './pages/Login';\nimport Index from './pages/Index';\nimport Task from './pages/Task';\nimport NewTask from './pages/NewTask';\nimport EditTask from './pages/EditTask';\n\nexport function App() {\n  return (\n    <Provider>\n      <BrowserRouter>\n        <Route path=\"/\" exact>\n          <Index />\n        </Route>\n\n        <Route path=\"/new-task\" exact>\n          <NewTask />\n        </Route>\n\n        <Route path=\"/tasks/:id/\" exact>\n          <Task />\n        </Route>\n\n        <Route path=\"/tasks/:id/edit\" exact>\n          <EditTask />\n        </Route>\n\n        <Route path=\"/login\">\n          <Login />\n        </Route>\n      </BrowserRouter>\n    </Provider>\n  );\n}\n","import 'dayjs/locale/ru';\nimport { render } from 'react-dom';\nimport { App } from './App';\n\nrender(<App />, document.getElementById('root'));\n"],"sourceRoot":""}